name: Container & Base Image Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build the final Go app image.
      - name: Build Go App Container
        run: docker build -t books-app:latest -f Dockerfile .

      # Pull the official NGINX image.
      - name: Pull NGINX Image
        run: docker pull nginx:latest

      # Install Grype for SBOM generation.
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      # Generate SBOM for the final Go app image.
      - name: Generate SBOM for Go App Container
        run: grype books-app:latest -o cyclonedx > sbom-app.json

      # Generate SBOM for the official NGINX image.
      - name: Generate SBOM for NGINX Container
        run: grype nginx:latest -o cyclonedx > sbom-nginx.json

      # Extract the base image from the Dockerfile (ignoring "scratch").
      - name: Extract Base Image from Dockerfile
        id: extract_base
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Error: Dockerfile not found in the repository root."
            exit 1
          fi
          base=$(grep -E '^FROM' Dockerfile | awk '{print $2}' | grep -v '^scratch$' | head -n1)
          if [ -z "$base" ]; then
            echo "Error: No valid base image found in Dockerfile."
            exit 1
          fi
          echo "Base image found: $base"
          echo "base_image=$base" >> $GITHUB_OUTPUT

      # Pull and generate SBOM for the builder base image.
      - name: Scan Builder Base Image
        run: |
          docker pull "${{ steps.extract_base.outputs.base_image }}"
          grype "${{ steps.extract_base.outputs.base_image }}" -o cyclonedx > sbom-builder.json

      # Upload all SBOM artifacts.
      - name: Upload SBOM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            sbom-app.json
            sbom-nginx.json
            sbom-builder.json

      # Install Snyk CLI.
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Run Snyk Container Scans with --fail-on=none so they don't stop the job immediately.
      - name: Run Snyk Container Scan on Go App Image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk container test books-app:latest --file=Dockerfile --fail-on=none --json-file-output=snyk-app-container-output.json
        continue-on-error: true

      - name: Upload Snyk Go App Container Scan Output
        uses: actions/upload-artifact@v4
        with:
          name: snyk-app-container-scan-output
          path: snyk-app-container-output.json

      - name: Run Snyk Container Scan on NGINX Image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk container test nginx:latest --file=Dockerfile --fail-on=none --json-file-output=snyk-nginx-container-output.json
        continue-on-error: true

      - name: Upload Snyk NGINX Container Scan Output
        uses: actions/upload-artifact@v4
        with:
          name: snyk-nginx-container-scan-output
          path: snyk-nginx-container-output.json

      - name: Run Snyk Container Scan on Builder Base Image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: snyk container test "${{ steps.extract_base.outputs.base_image }}" --file=Dockerfile --fail-on=none --json-file-output=snyk-builder-container-output.json
        continue-on-error: true

      - name: Upload Snyk Builder Container Scan Output
        uses: actions/upload-artifact@v4
        with:
          name: snyk-builder-container-scan-output
          path: snyk-builder-container-output.json

      # Final step: Aggregate results and fail the job if any vulnerabilities are found.
      - name: Aggregate Snyk Results
        run: |
          errors=0
          for file in snyk-app-container-output.json snyk-nginx-container-output.json snyk-builder-container-output.json; do
            if [ -f "$file" ]; then
              vuln_count=$(jq '.vulnerabilities | length' "$file")
              echo "$file has $vuln_count vulnerabilities."
              if [ "$vuln_count" -gt 0 ]; then
                errors=$((errors + vuln_count))
              fi
            fi
          done
          if [ "$errors" -gt 0 ]; then
            echo "Total vulnerabilities found: $errors"
            exit 1
          else
            echo "No vulnerabilities found in container scans."
          fi
