name: Container & Base Image Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security_scan:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build the final Go app image.
      - name: Build Go App Container
        run: docker build -t books-app:latest -f Dockerfile .

      # Pull the official NGINX image.
      - name: Pull NGINX Image
        run: docker pull nginx:latest

      # Install Grype for SBOM generation.
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      # Generate SBOM for the final Go app image.
      - name: Generate SBOM for Go App Container
        run: grype books-app:latest -o cyclonedx > sbom-app.json

      # Generate SBOM for the official NGINX image.
      - name: Generate SBOM for NGINX Container
        run: grype nginx:latest -o cyclonedx > sbom-nginx.json

      # Extract the base image from the Dockerfile (ignoring "scratch").
      - name: Extract Base Image from Dockerfile
        id: extract_base
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Error: Dockerfile not found in the repository root."
            exit 1
          fi
          base=$(grep -E '^FROM' Dockerfile | awk '{print $2}' | grep -v '^scratch$' | head -n1)
          if [ -z "$base" ]; then
            echo "Error: No valid base image found in Dockerfile."
            exit 1
          fi
          echo "Base image found: $base"
          echo "base_image=$base" >> $GITHUB_OUTPUT

      # Pull and generate SBOM for the builder base image.
      - name: Scan Builder Base Image
        run: |
          docker pull "${{ steps.extract_base.outputs.base_image }}"
          grype "${{ steps.extract_base.outputs.base_image }}" -o cyclonedx > sbom-builder.json

      # Upload all SBOM artifacts.
      - name: Upload SBOM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            sbom-app.json
            sbom-nginx.json
            sbom-builder.json

      # Install Snyk CLI.
      - name: Install Snyk CLI
        run: npm install -g snyk

      # Run Snyk Container Scans with SARIF output.
      - name: Run Snyk Container Scan on Go App Image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        run: snyk container test books-app:latest --file=Dockerfile --sarif-file-output=snyk-app.sarif --fail-on=all

      - name: Run Snyk Container Scan on NGINX Image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        run: snyk container test nginx:latest --file=Dockerfile --sarif-file-output=snyk-nginx.sarif --fail-on=all

      - name: Run Snyk Container Scan on Builder Base Image
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true
        run: snyk container test "${{ steps.extract_base.outputs.base_image }}" --file=Dockerfile --sarif-file-output=snyk-builder.sarif --fail-on=all

      # Merge individual SARIF files into one, limiting runs to 20 and replacing null severity values in rules.
      - name: Merge SARIF Files
        run: |
          jq -s '{
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "version": "2.1.0",
            "runs": (
              (map(.runs[]) | .[0:20])
              | map(
                  if (.tool.driver.rules) then
                    .tool.driver.rules |= map(
                      if (.properties | has("security-severity") and (.properties["security-severity"] == null or .properties["security-severity"] == "null"))
                      then .properties |= del(.["security-severity"])
                      else .
                      end
                    )
                  else
                    .
                  end
                )
            )
          }' snyk-app.sarif snyk-nginx.sarif snyk-builder.sarif > merged.sarif

      - name: Upload Merged SARIF Artifact
        uses: actions/upload-artifact@v4
        with:
          name: merged-sarif
          path: merged.sarif

      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: merged.sarif
